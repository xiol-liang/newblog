(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{627:function(v,_,t){"use strict";t.r(_);var a=t(9),P=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"osi-的七层协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#osi-的七层协议"}},[v._v("#")]),v._v(" OSI 的七层协议")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("分层")]),v._v(" "),t("th",[v._v("作用")]),v._v(" "),t("th",[v._v("协议")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("物理层")]),v._v(" "),t("td",[v._v("通过媒介传输比特，确定机械及电气规范（比特 Bit）")]),v._v(" "),t("td",[v._v("RJ45、CLOCK、IEEE802.3")])]),v._v(" "),t("tr",[t("td",[v._v("数据链路层")]),v._v(" "),t("td",[v._v("将比特组装成帧和点到点的传递（帧 Frame）")]),v._v(" "),t("td",[v._v("PPP、FR、HDLC、VLAN、MAC")])]),v._v(" "),t("tr",[t("td",[v._v("网络层")]),v._v(" "),t("td",[v._v("负责数据包从源到宿的传递和网际互连（包 Packet）")]),v._v(" "),t("td",[v._v("IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）")])]),v._v(" "),t("tr",[t("td",[v._v("运输层")]),v._v(" "),t("td",[v._v("提供端到端的可靠报文传递和错误恢复（ 段 Segment）")]),v._v(" "),t("td",[v._v("TCP、UDP、SPX")])]),v._v(" "),t("tr",[t("td",[v._v("会话层")]),v._v(" "),t("td",[v._v("建立、管理和终止会话（会话协议数据单元 SPDU）")]),v._v(" "),t("td",[v._v("NFS、SQL、NETBIOS、RPC")])]),v._v(" "),t("tr",[t("td",[v._v("表示层")]),v._v(" "),t("td",[v._v("对数据进行翻译、加密和压缩（表示协议数据单元 PPDU）")]),v._v(" "),t("td",[v._v("JPEG、MPEG、ASII")])]),v._v(" "),t("tr",[t("td",[v._v("应用层")]),v._v(" "),t("td",[v._v("允许访问 OSI 环境的手段（应用协议数据单元 APDU）")]),v._v(" "),t("td",[v._v("FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS")])])])]),v._v(" "),t("h2",{attrs:{id:"tcp-ip-的四层协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip-的四层协议"}},[v._v("#")]),v._v(" TCP/IP 的四层协议")]),v._v(" "),t("p",[v._v("网络接口层、网际层、传输层、应用层")]),v._v(" "),t("h2",{attrs:{id:"网络设备及其所在的层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络设备及其所在的层"}},[v._v("#")]),v._v(" 网络设备及其所在的层")]),v._v(" "),t("ol",[t("li",[v._v("中继器：物理层（在比特级别对网络信号进行再生和重定，使得它们能够在网络上传输更长的距离）")]),v._v(" "),t("li",[v._v("集线器（Hub）：物理层（纯硬件设备，主要用来连接计算机等网络终端）")]),v._v(" "),t("li",[v._v("网桥：数据链路层（将两个 LAN 连起来，根据 MAC 地址来转发帧）")]),v._v(" "),t("li",[v._v("交换机：数据链路层、网络层（识别数据包中的 MAC 地址信息，根据 MAC 地址进行转发，并将这些 MAC 地址与对应的端口记录在自己内部的一个地址表中）")]),v._v(" "),t("li",[v._v("路由器：网络层（路由选择、存储转发）")]),v._v(" "),t("li",[v._v("网关：应用层、传输层。网关在传输层上以实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。网关既可以用于广域网互连，也可以用于局域网互连）")])]),v._v(" "),t("h2",{attrs:{id:"tcp-协议如何保证可靠传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议如何保证可靠传输"}},[v._v("#")]),v._v(" TCP 协议如何保证可靠传输")]),v._v(" "),t("ol",[t("li",[v._v("数据合理分片和排序：应用数据被分割成 TCP 认为最适合发送的数据块。TCP 给发送的每一个包进行编号，接收方对数据包进行排序，丢弃重复的数据，把有序数据传送给应用层。")]),v._v(" "),t("li",[v._v("数据校验： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段并不确认收到此报文段。")]),v._v(" "),t("li",[v._v("流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP 的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，将提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。")]),v._v(" "),t("li",[v._v("拥塞控制： 当网络拥塞时，减少数据的发送。")]),v._v(" "),t("li",[v._v("确认和超时重传：停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。当 TCP 发出一个段后，它启动一个定时器，等待接收端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。")])]),v._v(" "),t("h2",{attrs:{id:"tcp-和-udp-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-区别"}},[v._v("#")]),v._v(" tcp 和 udp 区别")]),v._v(" "),t("ol",[t("li",[v._v("TCP 面向连接，UDP 是无连接的，即发送数据之前不需要建立连接。")]),v._v(" "),t("li",[v._v("TCP 提供可靠的服务，也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP 尽最大努力交付，但不保证可靠交付。")]),v._v(" "),t("li",[v._v("TCP 面向字节流，实际上是 TCP 把数据看成一连串无结构的字节流；UDP 是面向报文的，UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低。")]),v._v(" "),t("li",[v._v("每一条 TCP 连接只能是点到点的，UDP 支持一对一，一对多，多对一和多对多的交互通信。")]),v._v(" "),t("li",[v._v("TCP 首部有 20 字节，UDP 的首部只有 8 个字节。")])]),v._v(" "),t("h2",{attrs:{id:"tcp-和-udp-的优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-和-udp-的优缺点"}},[v._v("#")]),v._v(" tcp 和 udp 的优缺点")]),v._v(" "),t("ol",[t("li",[v._v("TCP\n"),t("ul",[t("li",[v._v("TCP 的优点：可靠，稳定。")]),v._v(" "),t("li",[v._v("TCP 的缺点：效率低，占用系统资源高，易被攻击。")])])]),v._v(" "),t("li",[v._v("UDP\n"),t("ul",[t("li",[v._v("UDP 的优点：快，比 TCP 稍安全。")]),v._v(" "),t("li",[v._v("UDP 的缺点：不可靠，不稳定。")])])]),v._v(" "),t("li",[v._v("总结\n"),t("ul",[t("li",[v._v("当对数据准确性要求高的时候，应该使用 TCP，比如 HTTP、HTTPS、FTP 等传输文件的协议，POP、SMTP 等邮件传输的协议。")]),v._v(" "),t("li",[v._v("当对数据准确性要求不高，同时要求网络通讯速度能尽量的快的时候，这时就可以使用 UDP。比如 QQ 语音、QQ 视频。")])])])]),v._v(" "),t("h2",{attrs:{id:"三次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[v._v("#")]),v._v(" 三次握手")]),v._v(" "),t("ol",[t("li",[v._v("客户端发送 SYN 给服务器，说明客户端请求建立连接；")]),v._v(" "),t("li",[v._v("服务端收到客户端发的 SYN，并回复 SYN+ACK 给客户端（同意建立连接）；")]),v._v(" "),t("li",[v._v("客户端收到服务端的 SYN+ACK 后，回复 ACK 给服务端（表示客户端收到了服务端发的同意报文）；")]),v._v(" "),t("li",[v._v("服务端收到客户端的 ACK，连接已建立，可以数据传输。")])]),v._v(" "),t("h2",{attrs:{id:"为什么不能两次或者四次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不能两次或者四次握手"}},[v._v("#")]),v._v(" 为什么不能两次或者四次握手")]),v._v(" "),t("p",[v._v("如果只是两次握手，至多只有连接发起方的起始序列号能被确认，另一方选择的序列号则得不到确认。如果是四次，就会降低连接的速度。")]),v._v(" "),t("h2",{attrs:{id:"四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[v._v("#")]),v._v(" 四次挥手")]),v._v(" "),t("ol",[t("li",[v._v("客户端发送 FIN 给服务器，说明客户端不会发送数据给服务器了（请求释放从客户端到服务器的连接）；")]),v._v(" "),t("li",[v._v("服务器接收到客户端发的 FIN，并回复 ACK 给客户端（同意释放从客户端到服务器的连接）；")]),v._v(" "),t("li",[v._v("客户端收到服务端回复的 ACK，此时从客户端到服务器的连接已释放（但服务端到客户端的连接还未释放，并且客户端还可以接收数据）；")]),v._v(" "),t("li",[v._v("服务端继续发送之前没发完的数据给客户端；")]),v._v(" "),t("li",[v._v("服务端发送 FIN+ACK 给客户端，说明服务端发送完了数据（请求释放从服务端到客户端的连接，就算没收到客户端的回复，过段时间也会自动释放）；")]),v._v(" "),t("li",[v._v("客户端收到服务端的 FIN+ACK，并回复 ACK 给服务端（同意释放从服务端到客户端的连接）；")]),v._v(" "),t("li",[v._v("服务端收到客户端的 ACK 后，释放从服务端到客户端的连接。")])]),v._v(" "),t("h2",{attrs:{id:"为什么连接的时候是三次握手-关闭的时候却是四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么连接的时候是三次握手-关闭的时候却是四次挥手"}},[v._v("#")]),v._v(" 为什么连接的时候是三次握手，关闭的时候却是四次挥手")]),v._v(" "),t("p",[v._v("因为 TCP 是全双工模式，客户端请求关闭连接后，客户端向服务端的连接关闭（一二次挥手），服务端继续传输之前没传完的数据给客户端，服务端向客户端的连接关闭（三四次挥手）。所以 TCP 释放连接时服务器的 ACK 和 FIN 是分开发送的（中间隔着数据传输），而 TCP 建立连接时服务器的 ACK 和 SYN 是一起发送的（第二次握手），所以 TCP 建立连接需要三次，而释放连接则需要四次。")]),v._v(" "),t("h2",{attrs:{id:"为什么客户端释放最后还需要等待-2msl-呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么客户端释放最后还需要等待-2msl-呢"}},[v._v("#")]),v._v(" 为什么客户端释放最后还需要等待 2MSL 呢？")]),v._v(" "),t("ol",[t("li",[v._v("为了保证客户端发送的最后一个 ACK 报文能够到达服务端。若未成功到达，则服务端超时重传 FIN+ACK 报文段，客户端再重传 ACK，并重新计时。")]),v._v(" "),t("li",[v._v("防止已失效的连接请求报文段出现在下次连接中。TIME-WAIT 持续 2MSL 可使本连接持续的时间内所产生的所有报文段都从网络中消失，这样可使下次连接中不会出现旧的连接报文段。")])]),v._v(" "),t("h2",{attrs:{id:"ipv4-和-ipv6-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ipv4-和-ipv6-区别"}},[v._v("#")]),v._v(" IPv4 和 IPv6 区别？")]),v._v(" "),t("ol",[t("li",[v._v("IPv4 的地址长度为 32 位，IPv6 地址长度为 128 位。")]),v._v(" "),t("li",[v._v("IPv6 使用更小的路由表。IPv6 的地址分配一开始就遵循聚类原则，在路由表中用一条记录就可以表示一片子网。")]),v._v(" "),t("li",[v._v("IPv6 增加了增强的组播支持和对流的支持。")]),v._v(" "),t("li",[v._v("IPv6 增加了对自动配置的支持，这是对 DHCP 协议的改进和扩展。")]),v._v(" "),t("li",[v._v("IPv6 拥有更高的安全性。")])]),v._v(" "),t("h2",{attrs:{id:"内网访问外网以及外网访问内网的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内网访问外网以及外网访问内网的原理"}},[v._v("#")]),v._v(" 内网访问外网以及外网访问内网的原理")]),v._v(" "),t("p",[v._v("首先解释一下"),t("code",[v._v("内网")]),v._v("与"),t("code",[v._v("外网")]),v._v("的概念：")]),v._v(" "),t("ol",[t("li",[v._v("内网：即局域网，局域网内每台计算机的 IP 地址在本局域网内具有互异性，是不可重复的。但两个局域网内的内网 IP 可以有相同的。")]),v._v(" "),t("li",[v._v("外网：即互联网，局域网通过一台服务器或是一个路由器对外连接的网络，这个 IP 地址是惟一的。也就是说，一个局域网里所有计算机的内网 IP 是互不相同的，但共用一个外网 IP。")])]),v._v(" "),t("p",[v._v("假如 A 和 B 的局域网 IP 相同，当他们同时访问服务器的时候，服务器通过端口映射技术区分 A 和 B。端口映射是 NAT 的一种，它将外网主机的 IP 地址的一个端口映射到内网中一台机器，提供相应的服务。通过这样的层层端口映射，最终保证地址(IP + 端口)的唯一性。A 和 B 访问服务器，尽管它们的局域网 IP 是一样的，但是最终它们访问互联网的地址(IP + 端口)是唯一的，所以，服务器回复原路返回时能够区分到底给谁回。")]),v._v(" "),t("h2",{attrs:{id:"get-和-post-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-区别"}},[v._v("#")]),v._v(" Get 和 Post 区别")]),v._v(" "),t("ol",[t("li",[v._v("Get 是不安全的，因为在传输过程中，数据被放在请求的 URL 中；Post 的所有操作对用户来说都是不可见的。")]),v._v(" "),t("li",[v._v("Get 传送的数据量较小，这主要是因为受 URL 长度限制；Post 传送的数据量较大，一般被默认为不受限制。")]),v._v(" "),t("li",[v._v("Get 限制 Form 表单的数据集的值必须为 ASCII 字符；而 Post 支持整个 ISO10646 字符集。")]),v._v(" "),t("li",[v._v("Get 执行效率却比 Post 方法好。Get 是 form 提交的默认方法。")]),v._v(" "),t("li",[v._v("GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包。（非必然，客户端可灵活决定）")])]),v._v(" "),t("h2",{attrs:{id:"http-请求的完全过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-请求的完全过程"}},[v._v("#")]),v._v(" Http 请求的完全过程")]),v._v(" "),t("ol",[t("li",[v._v("浏览器根据域名解析 IP 地址（DNS），并查 DNS 缓存")]),v._v(" "),t("li",[v._v("浏览器与 WEB 服务器建立一个 TCP 连接")]),v._v(" "),t("li",[v._v("浏览器给 WEB 服务器发送一个 HTTP 请求（GET/POST）。")]),v._v(" "),t("li",[v._v("服务端发送 HTTP 响应报文。")]),v._v(" "),t("li",[v._v("浏览器解析渲染")])]),v._v(" "),t("h2",{attrs:{id:"http-和-https-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-和-https-的区别"}},[v._v("#")]),v._v(" http 和 https 的区别")]),v._v(" "),t("ol",[t("li",[v._v("HTTP（超文本传输协议） 明文传输，数据都是未加密的，安全性较差，HTTPS（超文本传输安全协议）（SSL+HTTP） 数据传输过程是加密的，安全性较好。")]),v._v(" "),t("li",[v._v("使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。")]),v._v(" "),t("li",[v._v("HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。")]),v._v(" "),t("li",[v._v("http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。")]),v._v(" "),t("li",[v._v("HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以， HTTPS 比 HTTP 要更耗费服务器资源。")])]),v._v(" "),t("h2",{attrs:{id:"dns-递归查询与迭代查询的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns-递归查询与迭代查询的区别"}},[v._v("#")]),v._v(" DNS 递归查询与迭代查询的区别？")]),v._v(" "),t("ol",[t("li",[v._v("递归查询：主机向本地域名服务器的查询一般都是采用递归查询。所谓递归查询就是：如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份，向其他根域名服务器继续发出查询请求报文（即替该主机继续查询），而不是让该主机自己进行下一步的查询。因此，递归查询返回的查询结果或者是所要查询的 IP 地址，或者是报错，表示无法查询到所需的 IP 地址。")]),v._v(" "),t("li",[v._v("迭代查询：本地域名服务器向根域名服务器的查询通常是采用迭代查询。迭代查询的特点是这样的：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地域名服务器，“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询（而不是替本地域名服务器进行后续的查询）。")])])])}),[],!1,null,null,null);_.default=P.exports}}]);